generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model community {
  id          Int       @id @unique @default(autoincrement())
  userId      String    @db.VarChar(45)
  title       String    @db.VarChar(30)
  description String    @db.VarChar(200)
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user    user    @relation(fields: [userId], references: [userId])
  reply   reply[]
  like like[]

  @@index([userId], map: "community_userId_fkey")
}

model like {
  id Int @id @unique @default(autoincrement())
  boardId Int
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user user @relation(fields: [userId],references: [userId])
  community community @relation(fields: [boardId],references: [id])

}

model diary {
  id          Int      @id @unique @default(autoincrement())
  userId      String   @db.VarChar(45)
  date        String
  emotion     String   @db.VarChar(30)
  title       String   @db.VarChar(10)
  description String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  user        user     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "diary_userId_fkey")
}

model refreshToken {
  userId       String @unique(map: "userId_UNIQUE")
  refreshToken String @db.VarChar(500)
  user         user   @relation(fields: [userId], references: [userId])
}

model reply {
  id          Int       @id @unique @default(autoincrement())
  userId      String    @db.VarChar(45)
  boardId     Int
  description String    @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  community community @relation(fields: [boardId], references: [id])
  user      user      @relation(fields: [userId], references: [userId])

  @@index([boardId], map: "reply_boardId_fkey")
  @@index([userId], map: "reply_userId_fkey")
}

model user {
  userId       String         @id @db.VarChar(45)
  name         String?        @db.VarChar(20)
  email        String?        @db.VarChar(45)
  password     String?        @db.VarChar(30)
  withrawal    Int?           @db.TinyInt
  community    community[]
  diary        diary[]
  refreshToken refreshToken?
  reply        reply[]
  userToSearch userToSearch[]
  like  like[]
}

model userToSearch {
  searchId    Int    @id @unique @default(autoincrement())
  userId      String @db.VarChar(45)
  searchWord  String @db.VarChar(10)
  description String @db.VarChar(100)
  translation String @db.VarChar(100)
  user        user   @relation(fields: [userId], references: [userId])

  @@index([userId], map: "userToSearch_userId_fkey")
}
